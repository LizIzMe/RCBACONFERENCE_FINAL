@model RCBACONFERENCE.Models.UploadPaperInfo

@{
    ViewBag.Title = "Upload Research Paper";
    Layout = "_LayoutResearcher";
}

<body style="font-family: 'Montserrat', sans-serif; overflow-y: auto;">
    <div id="billboard" class="position-relative d-flex align-items-center py-1 bg-light-gray"
         style="background-image: url(/images/banner-image-bg.png); background-size: cover; background-repeat: no-repeat;">
        <div class="container mt-4">
            <h1 class="text-center fw-bold text mb-4" style="color:#850000;">Upload Research Paper</h1>

            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger text-center">
                    @TempData["Error"]
                </div>
            }

            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success">@TempData["Success"]</div>
            }


    <form asp-action="UploadPaper" method="post" enctype="multipart/form-data" class="shadow-lg p-4 rounded bg-white">
            <!-- Research Event -->
            <div class="mb-3">
                <label for="ResearchEventId" class="form-label">Select Research Event:</label>
                <select class="form-select" id="ResearchEventId" name="ResearchEventId" required>
                    <option value="">-- Select an Event --</option>
                    @foreach (var eventItem in ViewBag.ResearchEvents)
                    {
                        <option value="@eventItem.ResearchEventId">@eventItem.DisplayText</option>
                    }
                </select>
            </div>

            <!-- Ethics Certificate Dropdown -->
                <div class="mb-3 d-none" id="ethics-section">
                    <label for="EthicsID" class="form-label">Select Approved Ethics Certificate:</label>
                    <select class="form-select" id="EthicsID" name="EthicsID">
                        <option value="">-- Select an Approved Ethics Certificate --</option>
                    </select>
                </div>


            <!-- Title -->
            <div class="mb-3">
                <label for="Title" class="form-label">Title:</label>
                <input type="text" class="form-control" id="Title" name="Title" placeholder="Enter the title of the paper" required />
            </div>

            <!-- Authors -->
            <div id="authors-section" class="mb-3">
                <label for="Author" class="form-label">Author(s):</label>
                <div class="author-wrapper">
                    <input type="text" class="form-control mb-2" name="Authors[]" placeholder="Enter co-author names (excluding yourself)"/>
                </div>
            </div>
            <div class="d-flex justify-content-between mb-3">
                <button type="button" class="btn btn-outline-secondary btn-sm" id="add-author-btn">
                    <i class="bi bi-plus-circle"></i> Add Author
                </button>
                <button type="button" class="btn btn-outline-danger btn-sm" id="remove-author-btn">
                    <i class="bi bi-dash-circle"></i> Remove Last Author
                </button>
            </div>

            <!-- Abstract -->
            <div class="mb-3">
                <label for="Abstract" class="form-label">Abstract (Max 250 characters):</label>
                <textarea class="form-control" id="Abstract" name="Abstract" maxlength="250" placeholder="Enter the abstract" required></textarea>
                <small id="abstract-count" class="form-text text-muted">Characters left: 250</small>
            </div>

            <!-- Affiliation -->
            <div class="mb-3">
                <label for="Affiliation" class="form-label">Affiliation:</label>
                <input type="text" class="form-control" id="Affiliation" name="Affiliation" placeholder="Enter affiliation" required />
            </div>

            <!-- Keywords -->
            <div class="mb-3">
                <label for="Keywords" class="form-label">Keywords:</label>
                <div id="keywords-container" class="d-flex flex-wrap gap-2">
                    <!-- Tags will be dynamically added here -->
                </div>
                <input type="text" class="form-control mt-2" id="KeywordsInput" placeholder="Type a keyword and press Enter" />
            </div>
            <input type="hidden" id="Keywords" name="Keywords" />


            <!-- File Upload -->
            <div class="mb-3">
                <label for="File" class="form-label">Upload File (PDF only):</label>
                <input type="file" class="form-control" id="File" name="File" accept=".pdf" required />
            </div>

            <button type="submit" class="btn btn-primary w-100 fw-bold">
                <i class="bi bi-upload"></i> Submit
            </button>
        </form>
    </div>
</div>
</body>

@section Scripts {
    <script>
           document.addEventListener('DOMContentLoaded', function () {
            const authorsSection = document.getElementById('authors-section');
            const addAuthorButton = document.getElementById('add-author-btn');
            const removeAuthorButton = document.getElementById('remove-author-btn');
            // Add more authors
            addAuthorButton.addEventListener('click', function () {
                const newAuthorField = document.createElement('div');
                newAuthorField.className = 'author-wrapper';
                newAuthorField.innerHTML = `
                    <input type="text" class="form-control mb-2" name="Authors[]" placeholder="Enter author name" required />
                `;
                authorsSection.appendChild(newAuthorField);

                updateRemoveButtonVisibility();
            });

            // Remove last author
            removeAuthorButton.addEventListener('click', function () {
                const authorFields = authorsSection.querySelectorAll('.author-wrapper');
                if (authorFields.length > 1) {
                    authorsSection.removeChild(authorFields[authorFields.length - 1]);
                }
                updateRemoveButtonVisibility();
            });

            function updateRemoveButtonVisibility() {
                const authorFields = authorsSection.querySelectorAll('.author-wrapper');
                if (authorFields.length > 1) {
                    removeAuthorButton.classList.remove('d-none');
                } else {
                    removeAuthorButton.classList.add('d-none');
                }
            }

            updateRemoveButtonVisibility();
        });

        // Character count for Abstract
        document.getElementById('Abstract').addEventListener('input', function () {
            const maxLength = 250;
            const currentLength = this.value.length;
            document.getElementById('abstract-count').innerText = `Characters left: ${maxLength - currentLength}`;
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const keywordsContainer = document.getElementById('keywords-container');
            const keywordsInput = document.getElementById('KeywordsInput');
            const keywordsHiddenInput = document.getElementById('Keywords');

            let keywords = [];

            // Function to add a keyword
            function addKeyword(keyword) {
                if (keyword && !keywords.includes(keyword)) {
                    keywords.push(keyword);

                    const keywordChip = document.createElement('div');
                    keywordChip.className = 'badge bg-primary text-light p-2 d-flex align-items-center';
                    keywordChip.style.cursor = 'pointer';
                    keywordChip.innerHTML = `${keyword} <span class="ms-2 text-white" style="cursor: pointer;">&times;</span>`;

                    // Add event listener to remove the keyword on click
                    keywordChip.querySelector('span').addEventListener('click', function () {
                        removeKeyword(keyword);
                    });

                    keywordsContainer.appendChild(keywordChip);
                    updateHiddenInput();
                }
            }

            // Function to remove a keyword
            function removeKeyword(keyword) {
                keywords = keywords.filter(k => k !== keyword);
                const chips = Array.from(keywordsContainer.children);
                const chipToRemove = chips.find(chip => chip.textContent.trim().startsWith(keyword));
                if (chipToRemove) {
                    keywordsContainer.removeChild(chipToRemove);
                }
                updateHiddenInput();
            }

            function updateHiddenInput() {
                keywordsHiddenInput.value = keywords.join(', ');
            }

            keywordsInput.addEventListener('keydown', function (event) {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    const keyword = keywordsInput.value.trim();
                    if (keyword) {
                        addKeyword(keyword);
                        keywordsInput.value = '';
                    }
                }
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const researchEventDropdown = document.getElementById('ResearchEventId');
            const ethicsSection = document.getElementById('ethics-section');
            const ethicsDropdown = document.getElementById('EthicsID');

            // Get approved ethics certificates from ViewBag
            const approvedEthics = @Html.Raw(System.Text.Json.JsonSerializer.Serialize((IEnumerable<dynamic>)ViewBag.ApprovedEthics));

            researchEventDropdown.addEventListener('change', function () {
                const selectedEventId = this.value;
                ethicsDropdown.innerHTML = `<option value="">-- Select an Approved Ethics Certificate --</option>`;

                // Filter approved ethics certificates by the selected event
                const filteredEthics = approvedEthics.filter(e => e.ResearchEventId === selectedEventId);
                if (filteredEthics.length > 0) {
                    filteredEthics.forEach(ethics => {
                        const option = document.createElement('option');
                        option.value = ethics.EthicsID;
                        option.textContent = `${ethics.EthicsID} : ${ethics.ResearchTitle}`;
                        ethicsDropdown.appendChild(option);
                    });
                    ethicsSection.classList.remove('d-none');
                } else {
                    ethicsSection.classList.add('d-none');
                }
            });
        });
    </script>


}
