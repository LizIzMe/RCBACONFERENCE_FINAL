// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RCBACONFERENCE.Data;

#nullable disable

namespace RCBACONFERENCE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241127060157_NewTable")]
    partial class NewTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RCBACONFERENCE.Models.ConferenceRoles", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("CONF_ConferenceRoles");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.Evaluation", b =>
                {
                    b.Property<string>("EvaluationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClarityPresentation")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepthResearch")
                        .HasColumnType("int");

                    b.Property<DateTime>("EvaluatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OriginalityApproach")
                        .HasColumnType("int");

                    b.Property<int>("RelevanceTheme")
                        .HasColumnType("int");

                    b.Property<int>("ScientificNovelty")
                        .HasColumnType("int");

                    b.Property<int>("SignificanceContribution")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalQuality")
                        .HasColumnType("int");

                    b.Property<string>("UploadPaperID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EvaluationId");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("UploadPaperID");

                    b.ToTable("CONF_EvaluationTable");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.EvaluatorInfo", b =>
                {
                    b.Property<string>("EvaluatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserRoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EvaluatorId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("CONF_EvaluatorTable");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.PaperAssignments", b =>
                {
                    b.Property<string>("AssignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UploadPaperID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("UploadPaperID");

                    b.ToTable("CONF_PaperAssignmentTable");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.Receipt", b =>
                {
                    b.Property<string>("ReceiptId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ReceiptFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReceiptId");

                    b.HasIndex("ResearchEventId");

                    b.HasIndex("UserId");

                    b.ToTable("CONF_Receipt");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.Registration", b =>
                {
                    b.Property<string>("RegistrationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResearchEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RegistrationId");

                    b.HasIndex("ResearchEventId");

                    b.HasIndex("UserId");

                    b.ToTable("CONF_Registration");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.ResearchEvent", b =>
                {
                    b.Property<string>("ResearchEventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("EventThumbnail")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationOpen")
                        .HasColumnType("datetime2");

                    b.HasKey("ResearchEventId");

                    b.ToTable("CONF_ResearchEvent");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.ScheduleEvent", b =>
                {
                    b.Property<string>("ScheduleEventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResearchEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ScheduleEventId");

                    b.HasIndex("ResearchEventId");

                    b.ToTable("CONF_ScheduleEvent");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.UploadPaperInfo", b =>
                {
                    b.Property<string>("UploadPaperID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Affiliation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Authors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchEventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserRoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UploadPaperID");

                    b.HasIndex("ResearchEventId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("CONF_UploadPapers");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.UserConferenceRoles", b =>
                {
                    b.Property<string>("UserRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("CONF_UserConferenceRoles");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.UsersConference", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Affiliation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryRegion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("CONF_UserConference");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.Evaluation", b =>
                {
                    b.HasOne("RCBACONFERENCE.Models.EvaluatorInfo", "EvaluatorInfo")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RCBACONFERENCE.Models.UploadPaperInfo", "UploadPaperInfo")
                        .WithMany()
                        .HasForeignKey("UploadPaperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluatorInfo");

                    b.Navigation("UploadPaperInfo");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.EvaluatorInfo", b =>
                {
                    b.HasOne("RCBACONFERENCE.Models.UserConferenceRoles", "UserConferenceRoles")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserConferenceRoles");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.PaperAssignments", b =>
                {
                    b.HasOne("RCBACONFERENCE.Models.EvaluatorInfo", "EvaluatorInfo")
                        .WithMany("PaperAssignments")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RCBACONFERENCE.Models.UploadPaperInfo", "UploadPaperInfo")
                        .WithMany("PaperAssignments")
                        .HasForeignKey("UploadPaperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluatorInfo");

                    b.Navigation("UploadPaperInfo");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.Receipt", b =>
                {
                    b.HasOne("RCBACONFERENCE.Models.ResearchEvent", "ResearchEvent")
                        .WithMany()
                        .HasForeignKey("ResearchEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RCBACONFERENCE.Models.UsersConference", "UsersConference")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchEvent");

                    b.Navigation("UsersConference");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.Registration", b =>
                {
                    b.HasOne("RCBACONFERENCE.Models.ResearchEvent", "ResearchEvent")
                        .WithMany()
                        .HasForeignKey("ResearchEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RCBACONFERENCE.Models.UsersConference", "UsersConference")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchEvent");

                    b.Navigation("UsersConference");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.ScheduleEvent", b =>
                {
                    b.HasOne("RCBACONFERENCE.Models.ResearchEvent", "ResearchEvent")
                        .WithMany("ScheduleEvents")
                        .HasForeignKey("ResearchEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchEvent");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.UploadPaperInfo", b =>
                {
                    b.HasOne("RCBACONFERENCE.Models.ResearchEvent", "ResearchEvent")
                        .WithMany()
                        .HasForeignKey("ResearchEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RCBACONFERENCE.Models.UsersConference", "UsersConference")
                        .WithMany("UploadPapers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RCBACONFERENCE.Models.UserConferenceRoles", "UserConferenceRoles")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchEvent");

                    b.Navigation("UserConferenceRoles");

                    b.Navigation("UsersConference");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.UserConferenceRoles", b =>
                {
                    b.HasOne("RCBACONFERENCE.Models.ConferenceRoles", "ConferenceRoles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RCBACONFERENCE.Models.UsersConference", "UsersConference")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConferenceRoles");

                    b.Navigation("UsersConference");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.EvaluatorInfo", b =>
                {
                    b.Navigation("PaperAssignments");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.ResearchEvent", b =>
                {
                    b.Navigation("ScheduleEvents");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.UploadPaperInfo", b =>
                {
                    b.Navigation("PaperAssignments");
                });

            modelBuilder.Entity("RCBACONFERENCE.Models.UsersConference", b =>
                {
                    b.Navigation("UploadPapers");
                });
#pragma warning restore 612, 618
        }
    }
}
